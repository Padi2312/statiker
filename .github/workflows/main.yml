name: Build and release statiker
on:
  push:
    branches:
      - main

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # You can add more, for any target you'd like!
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          # - build: macos | # NOPE I DONT DO THIS. YOU'RE RICH ENOUGH TO DO IT YOURSELF.
          #   os: macos-latest
          #   target: x86_64-apple-darwin

          - build: windows-gnu
            os: ubuntu-latest
            target: x86_64-pc-windows-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Get version from cargo.toml
      - name: Get version
        id: get_version
        run: echo "VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')" >> $GITHUB_ENV

      - name: Install Rust
        # Or @nightly if you want
        uses: dtolnay/rust-toolchain@stable
        # Arguments to pass in
        with:
          # Make Rust compile to our target (defined in the matrix)
          targets: ${{ matrix.target }}

      - name: Install mingw-w64
        if: matrix.build == 'windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64 zip

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          # use-cross: true
          command: build --directory statiker
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          binary_name="statiker"

          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.build}}" = "windows-gnu" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi

          if [ "${{ matrix.build }}" = "windows-gnu" ]; then
            zip -r "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Tag commit
        run: |
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
          tag_name: ${{ env.VERSION }}
